<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>I Code It</title><link>https://icodeit.com.au/</link><description>Recent content on I Code It</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 01 Dec 2022 15:46:12 +1100</lastBuildDate><atom:link href="https://icodeit.com.au/index.xml" rel="self" type="application/rss+xml"/><item><title>If I Could Only Teach One Thing to a Beginner Developer</title><link>https://icodeit.com.au/posts/if-i-could-only-teach-one-thing-to-a-beginner-developer/</link><pubDate>Thu, 01 Dec 2022 15:46:12 +1100</pubDate><guid>https://icodeit.com.au/posts/if-i-could-only-teach-one-thing-to-a-beginner-developer/</guid><description>A few weeks ago, I got an interesting idea when I was writing a blog post about how to abstract your code to make it easier to reuse. I wanted to know what other developers think is the most important principle they would teach a newbie developer and why they would choose that design principle.
So I did a few different “interviews”, some over WeChat, a few by Google Forms and the rest from a Google Chat thread internally.</description></item><item><title>Implementing Design System</title><link>https://icodeit.com.au/posts/implementing-design-system/</link><pubDate>Sat, 19 Nov 2022 17:15:59 +1100</pubDate><guid>https://icodeit.com.au/posts/implementing-design-system/</guid><description>What is a design system? There are hundreds of definitions of what a design system is, and I think this one is generic enough and also has most of the essential elements:
A design system is a set of standards to manage design at scale by reducing redundancy while creating a shared language and visual consistency across different pages and channels.
So it’s not a single standard of how you would design at scale but a set of standards, and it is a visual language, which is important both by the user experience design and implementation.</description></item><item><title>A story: from idea to product</title><link>https://icodeit.com.au/posts/idea-to-product/</link><pubDate>Wed, 28 Oct 2020 15:46:12 +1100</pubDate><guid>https://icodeit.com.au/posts/idea-to-product/</guid><description>A story: from idea to product Undoubtedly, Covid-19 has, in many ways, affected our lives profoundly. Mandatory face masks when you go out for a coffee, social distancing in public, How to wash your hands in 6 steps, or the negative mental impacts since physical isolation because of working from home and so on. Those changes are shaping our life.
What I&amp;rsquo;m sharing today has something to do with covid-19. It&amp;rsquo;s about how I built and published a mobile App from scratch after Daniel Andrews announced Victoria enters Disaster State for two months and I have to stay at home for almost 24 hours per day.</description></item><item><title>Different Levels of Abstraction</title><link>https://icodeit.com.au/posts/levels-of-abs/</link><pubDate>Fri, 10 Jul 2020 23:11:16 +1100</pubDate><guid>https://icodeit.com.au/posts/levels-of-abs/</guid><description>The ability of abstracting should be the most fundamental skill a developer should have, and I can&amp;rsquo;t emphasise this enough. By abstracting, we can escape from the overwhelming seemingly irrelevant details to a solution that could solve all the problems at one go.
However, since every abstraction omits some details and emphasises some other features, sometimes it can block us from understanding the problem (I guess our brains prefer tangible things more).</description></item></channel></rss>